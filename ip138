#!/usr/bin/env bash
#
# IP 地理位置查询
#
# Usage: ip138 --format=(jsonp|xml|text) ip
#
# Require: curl(1)
#
# API 文档: http://www.ip138.com/api/


show_help () {
    cat <<EOF
ip138 - IP 地理位置查询 powered by http://www.ip138.com/api/

Usage:
    ip138 [--format=jsonp|xml|text] ip

Option:
    --format=jsonp|xml|text    The format of output (defaults to text)

EOF
}

# Copied from http://www.linuxjournal.com/content/validating-ip-address-bash-script
#
# Test an IP address for validity:
# Usage:
#      valid_ip IP_ADDRESS
#      if [[ $? -eq 0 ]]; then echo good; else echo bad; fi
#   OR
#      if valid_ip IP_ADDRESS; then echo good; else echo bad; fi
#
valid_ip () {
    local  ip=$1
    local  stat=1

    if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        OIFS=$IFS
        IFS='.'
        ip=($ip)
        IFS=$OIFS
        [[ ${ip[0]} -le 255 && ${ip[1]} -le 255 \
               && ${ip[2]} -le 255 && ${ip[3]} -le 255 ]]
        stat=$?
    fi
    return $stat
}

ip=
format=text

while :; do
    case $1 in
        --format)
            if [ -n "$2" ]; then
                format=$2
                shift
            else
                printf 'ERROR: "--format" requires a non-empty option argument.\n\n'
                show_help
                exit 1
            fi
            ;;
        --format=?*)
            format=${1#*=}      # Delete everything up to "=" and assign the remainder
            ;;
        --format=)              # Handle the case of an empty --file=
            printf 'ERROR: "--format" requires a non-empty option argument.\n\n'
            show_help
            exit 1
            ;;
        -?*)
            printf 'WARN: Unknown option (ignored): %s\n' "$1"
            ;;
        *)
            ip=$1
            break
    esac

    shift
done

# Read from stdin
if ! [ -t 0 ]; then
    read ip
fi

if [ -n "$ip" ]; then
    if ! valid_ip $ip; then
        printf "Error: Bad IP \"%s\"\n\n" $ip
        show_help
        exit 1
    fi
    curl --silent "http://test.ip138.com/query/?ip=${ip}&datatype=${format}"
    test -t 1 && printf "\n"
else
    # printf "Error: Empty IP\n\n"
    show_help
    exit 1
fi
